name: Deploy Backend (FastAPI) to EC2 (Docker over SSH)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-backend
  cancel-in-progress: true

env:
  APP_NAME: chat-backend
  APP_DIR: /srv/chat-backend
  APP_PORT: "8000"
  BACKEND_DIR: "backend"
  SSH_PORT: ${{ secrets.SSH_PORT }}
  SSH_STRICT_HOST_KEY_CHECKING: "yes"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add SSH key (agent)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Validate deploy secrets
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          BACKEND_ENV_FILE: ${{ secrets.BACKEND_ENV_FILE }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -euo pipefail
          missing=()
          for var in SERVER_IP SERVER_USER SSH_PRIVATE_KEY BACKEND_ENV_FILE; do
            if [ -z "${!var:-}" ]; then
              missing+=("$var")
            fi
          done
          if [ "${#missing[@]}" -ne 0 ]; then
            printf '::error::Missing required secrets: %s\n' "${missing[*]}"
            exit 1
          fi
          if [ -n "${SSH_PORT:-}" ]; then
            if ! [[ "${SSH_PORT}" =~ ^[0-9]+$ ]]; then
              echo "::error::SSH_PORT must be numeric when provided."
              exit 1
            fi
          fi
          echo "Required secrets are present."

      - name: Check SSH TCP connectivity
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -euo pipefail
          port="${SSH_PORT:-22}"
          echo "Verifying TCP connectivity to ${SERVER_IP}:${port}"
          if ! timeout 10 bash -c "</dev/tcp/${SERVER_IP}/${port}" >/dev/null 2>&1; then
            echo "::error::Unable to establish TCP connection to ${SERVER_IP}:${port}. Check firewall or networking."
            exit 1
          fi
          echo "TCP connectivity confirmed."

      - name: Trust server host key
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          ALLOW_INSECURE_HOST_KEY: ${{ secrets.ALLOW_INSECURE_HOST_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          port="${SSH_PORT:-22}"
          tmp="$(mktemp)"
          log="$(mktemp)"
          echo "Fetching SSH host key from ${SERVER_IP}:${port}"
          if timeout 15 ssh-keyscan -T 5 -p "$port" -H "$SERVER_IP" >"$tmp" 2>"$log"; then
            cat "$tmp" >> ~/.ssh/known_hosts
            echo "SSH host key recorded."
            echo "SSH_STRICT_HOST_KEY_CHECKING=yes" >> "$GITHUB_ENV"
          else
            scan_msg="$(cat "$log")"
            if [ -n "$scan_msg" ]; then
              echo "::warning::ssh-keyscan output: $scan_msg"
            fi
            if [ -n "${ALLOW_INSECURE_HOST_KEY:-}" ]; then
              echo "::warning::Falling back to StrictHostKeyChecking=no as ALLOW_INSECURE_HOST_KEY secret is set."
              echo "SSH_STRICT_HOST_KEY_CHECKING=no" >> "$GITHUB_ENV"
            else
              echo "::error::Failed to fetch SSH host key. Ensure the server is reachable or configure ALLOW_INSECURE_HOST_KEY for first deploys."
              rm -f "$tmp" "$log"
              exit 1
            fi
          fi
          rm -f "$tmp" "$log"

      - name: Compute release tag
        id: rel
        run: echo "tag=${GITHUB_SHA::7}-$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Ensure app dir exists & ownership
        run: |
          ssh -o StrictHostKeyChecking="${SSH_STRICT_HOST_KEY_CHECKING}" -p "${SSH_PORT:-22}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" \
            "sudo mkdir -p '${{ env.APP_DIR }}' && sudo chown -R \$(whoami):\$(whoami) '${{ env.APP_DIR }}'"

      - name: Sync backend source to server
        run: |
          rsync -az --delete \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'node_modules' \
            --exclude '.venv' \
            -e "ssh -o StrictHostKeyChecking=${SSH_STRICT_HOST_KEY_CHECKING} -p ${SSH_PORT:-22}" \
            "./${{ env.BACKEND_DIR }}/" \
            "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ env.APP_DIR }}/"

      - name: Prepare .env from secret (locally)
        run: |
          umask 177
          printf '%s' "${{ secrets.BACKEND_ENV_FILE }}" > .deploy.env

      - name: Upload .env to server
        run: |
          scp -o StrictHostKeyChecking="${SSH_STRICT_HOST_KEY_CHECKING}" -P "${SSH_PORT:-22}" ./.deploy.env \
            "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ env.APP_DIR }}/.env"
          rm -f ./.deploy.env
          ssh -o StrictHostKeyChecking="${SSH_STRICT_HOST_KEY_CHECKING}" -p "${SSH_PORT:-22}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" \
            "chmod 600 '${{ env.APP_DIR }}/.env'"

      - name: Create remote deploy script (locally)
        run: |
          cat > deploy-remote.sh <<'SCRIPT'
          set -euo pipefail

          # Expect env: APP_DIR, APP_NAME, APP_PORT, TAG
          echo "[deploy] APP_DIR=$APP_DIR APP_NAME=$APP_NAME TAG=$TAG"

          # 1) Ensure Docker
          if ! command -v docker >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl enable --now docker
          fi

          cd "$APP_DIR"

          # 2) Sanity checks
          if [ ! -f "Dockerfile" ]; then
            echo "[error] Dockerfile not found at $APP_DIR/Dockerfile"
            ls -la "$APP_DIR"
            exit 1
          fi
          if [ ! -f ".env" ]; then
            echo "[error] Missing $APP_DIR/.env (upload via BACKEND_ENV_FILE)"
            exit 1
          fi

          # 3) Build image using $APP_DIR as context
          sudo docker build --pull -t "$APP_NAME:$TAG" -t "$APP_NAME:latest" "$APP_DIR"

          # 4) Restart container
          if sudo docker ps -a --format '{{.Names}}' | grep -q "^${APP_NAME}$"; then
            sudo docker stop "$APP_NAME" || true
            sudo docker rm "$APP_NAME" || true
          fi

          sudo docker run -d \
            --name "$APP_NAME" \
            --restart unless-stopped \
            --env-file "$APP_DIR/.env" \
            -p "${APP_PORT}:8000" \
            "$APP_NAME:$TAG"

          # 5) Health check
          for i in {1..10}; do
            if curl -fsS "http://127.0.0.1:${APP_PORT}/healthz" >/dev/null; then
              echo "[ok] backend up"
              exit 0
            fi
            echo "[wait] retry $i..."
            sleep 2
          done

          echo "[fail] health check failed"
          sudo docker logs --tail=200 "$APP_NAME" || true
          exit 1
          SCRIPT

      - name: Upload and run remote deploy script
        run: |
          scp -o StrictHostKeyChecking="${SSH_STRICT_HOST_KEY_CHECKING}" -P "${SSH_PORT:-22}" ./deploy-remote.sh \
            "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/deploy-remote.sh"
          ssh -o StrictHostKeyChecking="${SSH_STRICT_HOST_KEY_CHECKING}" -p "${SSH_PORT:-22}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" \
            "chmod +x /tmp/deploy-remote.sh"
          ssh -o StrictHostKeyChecking="${SSH_STRICT_HOST_KEY_CHECKING}" -p "${SSH_PORT:-22}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" \
            "APP_DIR='${{ env.APP_DIR }}' APP_NAME='${{ env.APP_NAME }}' APP_PORT='${{ env.APP_PORT }}' TAG='${{ steps.rel.outputs.tag }}' /tmp/deploy-remote.sh"
