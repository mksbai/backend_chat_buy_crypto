name: Deploy Backend (FastAPI) to EC2 (Docker over SSH)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-backend
  cancel-in-progress: true

env:
  APP_NAME: chat-backend
  APP_DIR: /srv/chat-backend
  APP_PORT: "8000"
  # Optional; if not set as a secret, we default to 22 in shell with ${SSH_PORT:-22}
  SSH_PORT: ${{ secrets.SSH_PORT }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add SSH key (agent)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust server host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p "${SSH_PORT:-22}" -H "${{ secrets.SERVER_IP }}" >> ~/.ssh/known_hosts

      - name: Compute release tag
        id: rel
        run: echo "tag=${GITHUB_SHA::7}-$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

      - name: Ensure app dir exists
        run: |
          ssh -p "${SSH_PORT:-22}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" \
            "mkdir -p '${{ env.APP_DIR }}'"

      - name: Sync source to server
        run: |
          rsync -az --delete \
            --exclude '.git' --exclude '.github' --exclude 'node_modules' --exclude '.venv' \
            -e "ssh -p ${SSH_PORT:-22}" \
            ./ "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:${{ env.APP_DIR }}/"

      - name: Build & restart container on EC2
        run: |
          ssh -p "${SSH_PORT:-22}" "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}" bash -s <<'EOSH'
          set -euo pipefail
          APP_DIR="${APP_DIR}"
          APP_NAME="${APP_NAME}"
          APP_PORT="${APP_PORT}"
          TAG="${TAG}"

          # Ensure Docker
          if ! command -v docker >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl enable --now docker
          fi

          cd "$APP_DIR"

          # Ensure env file exists
          if [ ! -f ".env" ]; then
            cat > .env <<'ENVV'
PORT=8000
CORS_ORIGINS=http://localhost:5173
ENVV
          fi

          # Build image
          sudo docker build --pull -t "$APP_NAME:$TAG" -t "$APP_NAME:latest" .

          # Restart container
          if sudo docker ps -a --format '{{.Names}}' | grep -q "^${APP_NAME}$"; then
            sudo docker stop "$APP_NAME" || true
            sudo docker rm "$APP_NAME" || true
          fi

          sudo docker run -d \
            --name "$APP_NAME" \
            --restart unless-stopped \
            --env-file "$APP_DIR/.env" \
            -p "${APP_PORT}:8000" \
            "$APP_NAME:$TAG"

          # Health check
          for i in {1..10}; do
            if curl -fsS "http://127.0.0.1:${APP_PORT}/healthz" >/dev/null; then
              echo "[ok] backend up"
              exit 0
            fi
            echo "[wait] retry $i..."
            sleep 2
          done

          echo "[fail] health check failed"
          sudo docker logs --tail=200 "$APP_NAME" || true
          exit 1
EOSH
        env:
          APP_DIR: ${{ env.APP_DIR }}
          APP_NAME: ${{ env.APP_NAME }}
          APP_PORT: ${{ env.APP_PORT }}
          TAG: ${{ steps.rel.outputs.tag }}
